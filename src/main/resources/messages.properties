app.title=Cryptology Labs
app.select.lab=Select lab:
app.enter.lab.number=Enter lab number: 
app.enter.operation=Enter operation (encrypt/decrypt): 
app.enter.input.file=Enter input file path: 
app.enter.output.file=Enter output file path: 
app.success=Operation completed successfully!
app.error=Error: {0}
algorithm.rsa=RSA
algorithm.elgamal=El-Gamal
algorithm.shamir=Shamir
algorithm.rabin=Rabin
algorithm.elliptic.curve=Elliptic Curve
operation.encrypt=encrypt
operation.decrypt=decrypt
error.invalid.lab.number=Invalid lab number: {0}
error.invalid.algorithm=Invalid algorithm: {0}
error.invalid.operation=Invalid operation: {0}. Use 'encrypt' or 'decrypt'
error.empty.input.file=Input file path cannot be empty
error.empty.output.file=Output file path cannot be empty
error.operation.failed={0} operation failed: {1}
error.file.not.found=File not found: {0}
error.io.error=I/O error: {0}
rsa.enter.public.key=Enter public key e: 
rsa.enter.prime.p=Enter prime number p: 
rsa.enter.prime.q=Enter prime number q: 
rsa.calculated.private.key=Calculated private key d: {0}
rsa.modulus=Modulus n: {0}
rsa.missing.params=RSA {0} requires: {1}
elgamal.enter.prime=Enter prime number p: 
elgamal.enter.generator=Enter generator g: 
elgamal.enter.private.key=Enter private key x: 
elgamal.calculated.public.key=Calculated public key y: {0}
shamir.enter.prime=Enter prime number p: 
shamir.enter.key.a=Enter your key Ca: 
shamir.enter.key.b=Enter partner's key Cb: 
rabin.enter.prime.p=Enter prime number p: 
rabin.enter.prime.q=Enter prime number q: 
rabin.modulus=Modulus n: {0}
ec.enter.curve.a=Enter curve parameter a: 
ec.enter.curve.b=Enter curve parameter b: 
ec.enter.prime=Enter prime number p: 
ec.enter.base.point.x=Enter base point x: 
ec.enter.base.point.y=Enter base point y: 
ec.enter.private.key=Enter private key d: 
ec.calculated.public.key=Calculated public key Q: ({0}, {1})
validation.required={0} is required
validation.positive={0} must be positive
validation.file.exists=File {0} must exist
